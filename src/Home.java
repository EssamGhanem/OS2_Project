import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Home extends JFrame implements ActionListener {
    private JPanel panel1;

    private static final int BOARD_SIZE = 4;
    private static final int NUM_PIECES = 6; // Z, I, J, L, O, T

    private static final Object lock = new Object();
    private static int solutionsFound = 0;

    private JButton Solve;
    private JPanel Grid;
    private JButton b13;
    private JButton b1;
    private JButton b2;
    private JButton b9;
    private JButton b10;
    private JButton b11;
    private JButton b14;
    private JButton b15;
    private JButton b16;
    private JButton b8;
    private JButton b12;
    private JButton b3;
    private JButton b4;
    private JButton b7;
    private JButton b5;
    private JButton b6;
    private JTextField T;
    private JTextField Z;
    private JTextField L;
    private JTextField S;
    private JTextField O;
    private JTextField J;
    private JTextField I;
    JFrame frame = new JFrame();
    JPanel panel = new JPanel();
    int[][] m = {{1, 2, 4, 4},
            {1, 2, 4, 4},
            {1, 2, 2, 3},
            {1, 3, 3, 3}};


//    public void Coloring(int[][] numbers) {
//        System.out.println("In Coloring now ...");
//        for (int i = 0; i < 4; i++) {
//            for (int j = 0; j < 4; j++) {
//                if (numbers[i][j] == 1) {
//                    System.out.println("RED");
//                    gridB[i][j].setBackground(Color.RED);
//                } else if (numbers[i][j] == 2) {
//                    gridB[i][j].setBackground(Color.blue);
//                } else if (numbers[i][j] == 3) {
//                    gridB[i][j].setBackground(Color.green);
//                } else if (numbers[i][j] == 4) {
//                    gridB[i][j].setBackground(Color.yellow);
//                } else if (numbers[i][j] == 5) {
//                    gridB[i][j].setBackground(Color.black);
//                } else if (numbers[i][j] == 6) {
//                    gridB[i][j].setBackground(Color.orange);
//                } else {
//                    gridB[i][j].setBackground(Color.white);
//                }
//            }
//        }
//    }


    public Home() {

//        $$$setupUI$$$();
        System.out.println("You are in Home.java");
        JFrame frame = new JFrame();
        frame.add(panel1, BorderLayout.CENTER);

        frame.pack();
        frame.setTitle("4X4 GUI ...");
        frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
        frame.setSize(1200, 800);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);


        Solve.addActionListener(this);

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(1, 0));
        panel1.setBackground(new Color(-16105207));
        panel1.putClientProperty("html.disable", Boolean.TRUE);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, BorderLayout.CENTER);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel2.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        Solve = new JButton();
        Solve.setText("Solve");
        panel3.add(Solve, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel4.setBackground(new Color(-13811396));
        panel3.add(panel4, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(400, 400), null, 0, false));
        Grid = new JPanel();
        Grid.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        Grid.setEnabled(true);
        panel4.add(Grid, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(300, 300), null, 0, true));
        Grid.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        b13 = new JButton();
        b13.setBackground(new Color(-14145496));
        b13.setForeground(new Color(-14145496));
        b13.setText("");
        Grid.add(b13, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b2 = new JButton();
        b2.setBackground(new Color(-14145496));
        b2.setForeground(new Color(-14145496));
        b2.setText("");
        Grid.add(b2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b9 = new JButton();
        b9.setBackground(new Color(-14145496));
        b9.setForeground(new Color(-14145496));
        b9.setText("");
        Grid.add(b9, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b10 = new JButton();
        b10.setBackground(new Color(-14145496));
        b10.setForeground(new Color(-14145496));
        b10.setText("");
        Grid.add(b10, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b11 = new JButton();
        b11.setBackground(new Color(-14145496));
        b11.setForeground(new Color(-14145496));
        b11.setText("");
        Grid.add(b11, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b14 = new JButton();
        b14.setBackground(new Color(-14145496));
        b14.setForeground(new Color(-14145496));
        b14.setText("");
        Grid.add(b14, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b15 = new JButton();
        b15.setBackground(new Color(-14145496));
        b15.setForeground(new Color(-14145496));
        b15.setText("");
        Grid.add(b15, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b16 = new JButton();
        b16.setBackground(new Color(-14145496));
        b16.setForeground(new Color(-14145496));
        b16.setText("");
        Grid.add(b16, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b8 = new JButton();
        b8.setBackground(new Color(-14145496));
        b8.setForeground(new Color(-14145496));
        b8.setText("");
        Grid.add(b8, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b12 = new JButton();
        b12.setBackground(new Color(-14145496));
        b12.setForeground(new Color(-14145496));
        b12.setText("");
        Grid.add(b12, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b3 = new JButton();
        b3.setBackground(new Color(-14145496));
        b3.setForeground(new Color(-14145496));
        b3.setText("");
        Grid.add(b3, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b4 = new JButton();
        b4.setAlignmentX(0.5f);
        b4.setBackground(new Color(-14145496));
        b4.setForeground(new Color(-14145496));
        b4.setHorizontalTextPosition(0);
        b4.setInheritsPopupMenu(false);
        b4.setText("");
        b4.setVerifyInputWhenFocusTarget(false);
        Grid.add(b4, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b7 = new JButton();
        b7.setBackground(new Color(-14145496));
        b7.setForeground(new Color(-14145496));
        b7.setText("");
        Grid.add(b7, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b5 = new JButton();
        b5.setBackground(new Color(-14145496));
        b5.setForeground(new Color(-14145496));
        b5.setText("");
        Grid.add(b5, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b6 = new JButton();
        b6.setBackground(new Color(-14145496));
        b6.setForeground(new Color(-14145496));
        b6.setText("");
        Grid.add(b6, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        b1 = new JButton();
        b1.setBackground(new Color(-14145496));
        b1.setForeground(new Color(-14145496));
        b1.setText("");
        Grid.add(b1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(12, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel5.setBackground(new Color(-12067));
        panel3.add(panel5, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        T = new JTextField();
        panel5.add(T, new com.intellij.uiDesigner.core.GridConstraints(11, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Z");
        panel5.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Z = new JTextField();
        panel5.add(Z, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        L = new JTextField();
        L.setText("");
        panel5.add(L, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        O = new JTextField();
        O.setText("");
        panel5.add(O, new com.intellij.uiDesigner.core.GridConstraints(9, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        J = new JTextField();
        panel5.add(J, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        I = new JTextField();
        I.setText("");
        panel5.add(I, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("I");
        panel5.add(label2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("J");
        panel5.add(label3, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("L");
        panel5.add(label4, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("O");
        panel5.add(label5, new com.intellij.uiDesigner.core.GridConstraints(8, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("T");
        panel5.add(label6, new com.intellij.uiDesigner.core.GridConstraints(10, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }


    public int[] getInput() {
        int[] input = {Integer.parseInt(Z.getText()),
                Integer.parseInt(I.getText()),
                Integer.parseInt(J.getText()),
                Integer.parseInt(L.getText()),
                Integer.parseInt(O.getText()),
                Integer.parseInt(T.getText())};
        // input = { Z: ,I: , J: , L: ,O: ,T: } the number of each shape
        return input;
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        System.out.println("Cliecd");
        JButton[][] gridB = {{b1, b2, b3, b4},
                {b5, b6, b7, b8},
                {b9, b10, b11, b12},
                {b13, b14, b15, b16}};
        int[][] m = {{1, 2, 4, 4},
                {1, 2, 4, 4},
                {1, 2, 2, 3},
                {1, 3, 3, 3}};

        ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());

        for (int i = 0; i < NUM_PIECES; i++) {
            TetrisPiece piece = TetrisPiece.values()[i];
            executor.execute(() -> solve(new TetrisBoard(BOARD_SIZE), piece));
        }

        executor.shutdown();

       
            System.out.println(getInput()[0]);

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (m[i][j] == 1) {
                    gridB[i][j].setBackground(Color.RED);
                } else if (m[i][j] == 2) {
                    gridB[i][j].setBackground(Color.blue);
                } else if (m[i][j] == 3) {
                    gridB[i][j].setBackground(Color.green);
                } else if (m[i][j] == 4) {
                    gridB[i][j].setBackground(Color.yellow);
                } else if (m[i][j] == 5) {
                    gridB[i][j].setBackground(Color.black);
                } else if (m[i][j] == 6) {
                    gridB[i][j].setBackground(Color.orange);
                } else {
                    gridB[i][j].setBackground(Color.white);
                }
            }
        }

    }

//    public static void main(String[] args) {
//        ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
//
//        for (int i = 0; i < NUM_PIECES; i++) {
//            TetrisPiece piece = TetrisPiece.values()[i];
//            executor.execute(() -> solve(new TetrisBoard(BOARD_SIZE), piece));
//        }
//
//        executor.shutdown();
//    }

    private static void solve(TetrisBoard board, TetrisPiece piece) {
        solveRecursive(board, piece, 0);
    }

    private static void solveRecursive(TetrisBoard board, TetrisPiece piece, int row) {
        if (row == BOARD_SIZE) {
            synchronized (lock) {
                if (board.isFull()) {
                    System.out.println("Solution found:");
                    System.out.println(board);
                    solutionsFound++;
                }
            }
            return;
        }

        for (int col = 0; col < BOARD_SIZE; col++) {
            if (board.canPlacePiece(piece, row, col)) {
                TetrisBoard newBoard = board.placePiece(piece, row, col);
                solveRecursive(newBoard, piece, row + 1);
            }
        }
    }

    private enum TetrisPiece {
        Z, I, J, L, O, T
    }

    private static class TetrisBoard {
        private char[][] board;

        TetrisBoard(int size) {
            this.board = new char[size][size];
        }

        boolean canPlacePiece(TetrisPiece piece, int row, int col) {
            // Get the shape of the Tetris piece
            char[][] shape = getPieceShape(piece);

            // Check if the piece can be placed without overlapping existing blocks or going out of bounds
            for (int i = 0; i < shape.length; i++) {
                for (int j = 0; j < shape[i].length; j++) {
                    if (shape[i][j] == 'X') {
                        int newRow = row + i;
                        int newCol = col + j;

                        // Check if the new position is within bounds
                        if (newRow < 0 || newRow >= board.length || newCol < 0 || newCol >= board[newRow].length) {
                            return false;
                        }

                        // Check if the new position is already occupied
                        if (board[newRow][newCol] != '\0') {
                            return false;
                        }
                    }
                }
            }

            return true;
        }

        TetrisBoard placePiece(TetrisPiece piece, int row, int col) {
            // Get the shape of the Tetris piece
            char[][] shape = getPieceShape(piece);

            // Create a new TetrisBoard with the same size as the current board
            TetrisBoard newBoard = new TetrisBoard(board.length);

            // Copy the current board to the new board
            for (int i = 0; i < board.length; i++) {
                System.arraycopy(board[i], 0, newBoard.board[i], 0, board[i].length);
            }

            // Place the Tetris piece on the new board
            for (int i = 0; i < shape.length; i++) {
                for (int j = 0; j < shape[i].length; j++) {
                    if (shape[i][j] == 'X') {
                        int newRow = row + i;
                        int newCol = col + j;

                        // Update the new board with the Tetris piece
                        newBoard.board[newRow][newCol] = 'X';
                    }
                }
            }

            return newBoard;
        }


        boolean isFull() {
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[i].length; j++) {
                    if (board[i][j] == '\0') {
                        // If there is an empty cell, the board is not full
                        return false;
                    }
                }
            }
            // If no empty cells are found, the board is full
            return true;
        }


        private char[][] getPieceShape(TetrisPiece piece) {
            // Define the shape of each Tetris piece
            char[][] shape;
            switch (piece) {
                case Z:
                    shape = new char[][]{{'X', 'X', '\0', '\0'}, {'\0', 'X', 'X', '\0'}};
                    break;
                case I:
                    shape = new char[][]{{'X', 'X', 'X', 'X'}};
                    break;
                case J:
                    shape = new char[][]{{'X', '\0', '\0', '\0'}, {'X', 'X', 'X', '\0'}};
                    break;
                case L:
                    shape = new char[][]{{'\0', '\0', 'X', '\0'}, {'X', 'X', 'X', '\0'}};
                    break;
                case O:
                    shape = new char[][]{{'X', 'X'}, {'X', 'X'}};
                    break;
                case T:
                    shape = new char[][]{{'\0', 'X', '\0', '\0'}, {'X', 'X', 'X', '\0'}};
                    break;
                default:
                    throw new IllegalArgumentException("Invalid Tetris piece");
            }
            return shape;
        }

        @Override
        public String toString() {
            StringBuilder result = new StringBuilder();

            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[i].length; j++) {
                    char cell = (board[i][j] == '\0') ? '.' : board[i][j];
                    result.append(cell).append(' ');
                }
                result.append('\n');
            }

            return result.toString();
        }

    }
}


